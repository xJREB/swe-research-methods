@article{Adolph2011,
abstract = {Grounded Theory is a research method that generates theory from data and is useful for understanding how people resolve problems that are of concern to them. Although the method looks deceptively simple in concept, implementing Grounded Theory research can often be confusing in practice. Furthermore, despite many papers in the social science disciplines and nursing describing the use of Grounded Theory, there are very few examples and relevant guides for the software engineering researcher. This paper describes our experience using classical (i.e., Glaserian) Grounded Theory in a software engineering context and attempts to interpret the canons of classical Grounded Theory in a manner that is relevant to software engineers.We providemodel to help the software engineering researchers interpret the often fuzzy definitions found in Grounded Theory texts and share our experience and lessons learned during our research. We summarize these lessons learned in a set of fifteen guidelines. {\textcopyright} Springer Science+Business Media, LLC 2011.},
author = {Adolph, Steve and Hall, Wendy and Kruchten, Philippe},
doi = {10.1007/s10664-010-9152-6},
issn = {1382-3256},
journal = {Empirical Software Engineering},
keywords = {Empirical software engineering research,Grounded theory,Qualitative research,Theory generation},
month = {aug},
number = {4},
pages = {487--513},
title = {{Using grounded theory to study the experience of software development}},
volume = {16},
year = {2011}
}
@article{Boren2000,
abstract = {Thinking-aloud protocols may be the most widely used method in usability testing, but the descriptions of this practice in the usability literature and the work habits of practitioners do not conform to the theoretical basis most often cited for it: Ericsson and Simon's seminal work PROTOCOL ANALYSIS: VERBAL REPORTS AS DATA. After reviewing Ericsson and Simon's theoretical basis for thinking aloud, we review the ways in which actual usability practice diverges from this model. We then explore the concept of SPEECH GENRE as an alternative theoretical framework. We first consider uses of this new framework that are consistent with Simon and Ericsson's goal of eliciting a verbal report that is as undirected, undisturbed, and constant as possible. We then go on to consider how the proposed new approach might handle problems that arise in usability testing that appear to require interventions not supported in the older model.},
author = {Boren, T. and Ramey, Judith},
doi = {10.1109/47.867942},
issn = {03611434},
journal = {IEEE Transactions on Professional Communication},
number = {3},
pages = {261--278},
title = {{Thinking aloud: reconciling theory and practice}},
volume = {43},
year = {2000}
}
@inproceedings{Cruzes2011,
abstract = {Thematic analysis is an approach that is often used for identifying, analyzing, and reporting patterns (themes) within data in primary qualitative research. 'Thematic synthesis' draws on the principles of thematic analysis and identifies the recurring themes or issues from multiple studies, interprets and explains these themes, and draws conclusions in systematic reviews. This paper conceptualizes the thematic synthesis approach in software engineering as a scientific inquiry involving five steps that parallel those of primary research. The process and outcome associated with each step are described and illustrated with examples from systematic reviews in software engineering. {\textcopyright} 2011 IEEE.},
author = {Cruzes, Daniela S. and Dyba, T.},
booktitle = {2011 International Symposium on Empirical Software Engineering and Measurement},
doi = {10.1109/ESEM.2011.36},
isbn = {978-1-4577-2203-5},
keywords = {Evidence-based and empirical software engineering,Research synthesis,Secondary research,Systematic review},
month = {sep},
pages = {275--284},
publisher = {IEEE},
title = {{Recommended Steps for Thematic Synthesis in Software Engineering}},
year = {2011}
}
@book{Figueiredo2007,
abstract = {This chapter presents an example of action research in the healthcare industry. A synopsis of the project is provided, followed by a discussion of why action research was successful in this project and in this industry. Further discussion focuses on the overall use of action research to increase interactions between academic researchers and business practitioners. The authors propose the increased use of action research as a synergistic tool to improve the relevance of academic research while increasing rigor in the healthcare industry},
address = {Boston, MA},
author = {Figueiredo, Ant{\'{o}}nio Dias and Cunha, Paulo Rupino},
booktitle = {Information System Action Research An Applied View of Emerging Concepts and Methods},
doi = {10.1007/978-0-387-36060-7},
editor = {Kock, Ned},
isbn = {978-0-387-36059-1},
pages = {61--96},
publisher = {Springer US},
series = {Integrated Series in Information Systems},
title = {{Information Systems Action Research}},
volume = {13},
year = {2007}
}
@inproceedings{Hove2005,
abstract = {Many phenomena related to software development are qualitative in nature. Relevant measures of such phenomena are often collected using semi-structured interviews. Such interviews involve high costs, and the quality of the collected data is related to how the interviews are conducted. Careful planning and conducting of the interviews are therefore necessary, and experiences from interview studies in software engineering should consequently be collected and analyzed to provide advice to other researchers. We have brought together experiences from 12 software engineering studies, in which a total of 280 interviews were conducted. Four areas were particularly challenging when planning and conducting these interviews; estimating the necessary effort, ensuring that the interviewer had the needed skills, ensuring good interaction between interviewer and interviewees, and using the appropriate tools and project artifacts. The paper gives advice on how to handle these areas and suggests what information about the interviews should be included when reporting studies where interviews have been used in data collection. Knowledge from other disciplines is included. By sharing experience, knowledge about the accomplishments of software engineering interviews is increased and hence, measures of high quality can be achieved},
author = {Hove, S.E. and Anda, Bente},
booktitle = {11th IEEE International Software Metrics Symposium (METRICS'05)},
doi = {10.1109/METRICS.2005.24},
isbn = {0-7695-2371-4},
issn = {15301435},
number = {Metrics},
pages = {23--23},
publisher = {IEEE},
title = {{Experiences from Conducting Semi-structured Interviews in Empirical Software Engineering Research}},
year = {2005}
}
@techreport{Mayring2014,
address = {Klagenfurt},
author = {Mayring, Philipp},
keywords = {content analysis,empirical social research,qualitative method,quantitative method,research approach,text analysis},
title = {{Qualitative content analysis: theoretical foundation, basic procedures and software solution}},
year = {2014}
}
@incollection{Seaman2008,
abstract = {Essential Guide to Qualitative Methods in Organizational Research is an excellent resource for students and researchers in the areas of organization studies, management research and organizational psychology, bringing together in one volume the range of methods available for undertaking qualitative data collection and analysis. The volume includes 30 chapters, each focusing on a specific technique. The chapters cover traditional research methods, analysis techniques, and interventions as well as the latest developments in the field. Each chapter reviews how the method has been used in organizational research, discusses the advantages and disadvantages of using the method, and presents a case study example of the method in use. A list of further reading is supplied for those requiring additional information about a given method. The comprehensive and accessible nature of this collection will make it an essential and lasting handbook for researchers and students studying organizations.},
address = {London},
author = {Seaman, Carolyn B.},
booktitle = {Guide to Advanced Empirical Software Engineering},
doi = {10.1007/978-1-84800-044-5_2},
isbn = {0761948880},
issn = {07619488},
pages = {35--62},
pmid = {50},
publisher = {Springer London},
title = {{Qualitative Methods}},
year = {2008}
}
@inproceedings{ShaochunXu2005,
abstract = {This paper proposes dialog-based protocol for the study of the cognitive activities during software development and evolution. The dialog-based protocol, derived from the idea of pair programming, is a significant alternative to the common think-aloud protocol, because it lessens the Hawthorne and placebo effects. Using screen-capturing and voice recording instead of videotaping further reduces the Hawthorne effect. The self-directed learning theory provides an encoding scheme and can be used in analyzing the data. A case study illustrates this new approach. {\textcopyright} 2005 IEEE.},
author = {{Shaochun Xu} and Rajlich, V{\'{a}}clav},
booktitle = {2005 International Symposium on Empirical Software Engineering},
doi = {10.1109/ISESE.2005.1541848},
isbn = {0-7803-9507-7},
pages = {383--392},
publisher = {IEEE},
title = {{Dialog-based protocol: an empirical research method for cognitive activities in software engineering}},
year = {2005}
}
@article{Sharp2016,
abstract = {Ethnography is a qualitative research method used to study people and cultures. It is largely adopted in disciplines outside software engineering, including different areas of computer science. Ethnography can provide an in-depth understanding of the socio-technological realities surrounding everyday software development practice, i.e., it can help to uncover not only what practitioners do, but also why they do it. Despite its potential, ethnography has not been widely adopted by empirical software engineering researchers, and receives little attention in the related literature. The main goal of this paper is to explain how empirical software engineering researchers would benefit from adopting ethnography. This is achieved by explicating four roles that ethnography can play in furthering the goals of empirical software engineering: to strengthen investigations into the social and human aspects of software engineering; to inform the design of software engineering tools; to improve method and process development; and to inform research programmes. This article introduces ethnography, explains its origin, context, strengths and weaknesses, and presents a set of dimensions that position ethnography as a useful and usable approach to empirical software engineering research. Throughout the paper, relevant examples of ethnographic studies of software practice are used to illustrate the points being made.},
author = {Sharp, Helen and Dittrich, Yvonne and de Souza, Cleidson R. B.},
doi = {10.1109/TSE.2016.2519887},
issn = {0098-5589},
journal = {IEEE Transactions on Software Engineering},
keywords = {Design tools and techniques,computer-supported collaborative work,human factors in software design,software engineering process},
month = {aug},
number = {8},
pages = {786--804},
publisher = {IEEE},
title = {{The Role of Ethnographic Studies in Empirical Software Engineering}},
volume = {42},
year = {2016}
}
@inproceedings{Stol2016,
abstract = {Grounded Theory (GT) has proved an extremely useful research approach in several fields including medical sociology, nursing, education and management theory. However, GT is a complex method based on an inductive paradigm that is fundamentally different from the traditional hypothetico-deductive research model. As there are at least three variants of GT, some ostensibly GT research suffers from method slurring, where researchers adopt an arbitrary subset of GT practices that are not recognizable as GT. In this paper, we describe the variants of GT and identify the core set of GT practices. We then analyze the use of grounded theory in software engineering. We carefully and systematically selected 98 articles that mention GT, of which 52 explicitly claim to use GT, with the other 46 using GT techniques only. Only 16 articles provide detailed accounts of their research procedures. We offer guidelines to improve the quality of both conducting and reporting GT studies. The latter is an important extension since current GT guidelines in software engineering do not cover the reporting process, despite good reporting being necessary for evaluating a study and informing subsequent research.},
address = {New York, New York, USA},
author = {Stol, Klaas-Jan and Ralph, Paul and Fitzgerald, Brian},
booktitle = {Proceedings of the 38th International Conference on Software Engineering - ICSE '16},
doi = {10.1145/2884781.2884833},
isbn = {9781450339001},
keywords = {Grounded theory,Guidelines,Review,Software engineering},
pages = {120--131},
publisher = {ACM Press},
title = {{Grounded theory in software engineering research}},
year = {2016}
}
